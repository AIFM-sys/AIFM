# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('vmaskmodule', [dirname(__file__)])
        except ImportError:
            import vmaskmodule
            return vmaskmodule
        if fp is not None:
            try:
                _mod = imp.load_module('vmaskmodule', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    vmaskmodule = swig_import_helper()
    del swig_import_helper
else:
    import vmaskmodule
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import VError
import VImage
import VDisplay
class VMask(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VMask, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VMask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = vmaskmodule.new_VMask(*args)
        try: self.this.append(this)
        except: self.this = this
    def __assign__(self, *args): return vmaskmodule.VMask___assign__(self, *args)
    __swig_destroy__ = vmaskmodule.delete_VMask
    __del__ = lambda self : None;
    def xsize(self): return vmaskmodule.VMask_xsize(self)
    def ysize(self): return vmaskmodule.VMask_ysize(self)
    def size(self): return vmaskmodule.VMask_size(self)
    def filename(self): return vmaskmodule.VMask_filename(self)
    def type(self): return vmaskmodule.VMask_type(self)
    def mask(self): return vmaskmodule.VMask_mask(self)
    def ostream_print(self, *args): return vmaskmodule.VMask_ostream_print(self, *args)
VMask_swigregister = vmaskmodule.VMask_swigregister
VMask_swigregister(VMask)

class VIMask(VMask):
    __swig_setmethods__ = {}
    for _s in [VMask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VIMask, name, value)
    __swig_getmethods__ = {}
    for _s in [VMask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VIMask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = vmaskmodule.new_VIMask(*args)
        try: self.this.append(this)
        except: self.this = this
    def scale(self): return vmaskmodule.VIMask_scale(self)
    def offset(self): return vmaskmodule.VIMask_offset(self)
    def embed(self, *args): return vmaskmodule.VIMask_embed(self, *args)
    def __index__(self, *args): return vmaskmodule.VIMask___index__(self, *args)
    def __call__(self, *args): return vmaskmodule.VIMask___call__(self, *args)
    def get(self, *args): return vmaskmodule.VIMask_get(self, *args)
    __swig_getmethods__["gauss"] = lambda x: vmaskmodule.VIMask_gauss
    if _newclass:gauss = staticmethod(vmaskmodule.VIMask_gauss)
    __swig_getmethods__["gauss_sep"] = lambda x: vmaskmodule.VIMask_gauss_sep
    if _newclass:gauss_sep = staticmethod(vmaskmodule.VIMask_gauss_sep)
    __swig_getmethods__["log"] = lambda x: vmaskmodule.VIMask_log
    if _newclass:log = staticmethod(vmaskmodule.VIMask_log)
    def rotate45(self): return vmaskmodule.VIMask_rotate45(self)
    def rotate90(self): return vmaskmodule.VIMask_rotate90(self)
    def trn(self): return vmaskmodule.VIMask_trn(self)
    def inv(self): return vmaskmodule.VIMask_inv(self)
    def cat(self, *args): return vmaskmodule.VIMask_cat(self, *args)
    def mul(self, *args): return vmaskmodule.VIMask_mul(self, *args)
    __swig_destroy__ = vmaskmodule.delete_VIMask
    __del__ = lambda self : None;
VIMask_swigregister = vmaskmodule.VIMask_swigregister
VIMask_swigregister(VIMask)

def __lshift__(*args):
  return vmaskmodule.__lshift__(*args)
__lshift__ = vmaskmodule.__lshift__

def VIMask_gauss(*args):
  return vmaskmodule.VIMask_gauss(*args)
VIMask_gauss = vmaskmodule.VIMask_gauss

def VIMask_gauss_sep(*args):
  return vmaskmodule.VIMask_gauss_sep(*args)
VIMask_gauss_sep = vmaskmodule.VIMask_gauss_sep

def VIMask_log(*args):
  return vmaskmodule.VIMask_log(*args)
VIMask_log = vmaskmodule.VIMask_log

class VDMask(VMask):
    __swig_setmethods__ = {}
    for _s in [VMask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VDMask, name, value)
    __swig_getmethods__ = {}
    for _s in [VMask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VDMask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = vmaskmodule.new_VDMask(*args)
        try: self.this.append(this)
        except: self.this = this
    def embed(self, *args): return vmaskmodule.VDMask_embed(self, *args)
    def scale(self): return vmaskmodule.VDMask_scale(self)
    def offset(self): return vmaskmodule.VDMask_offset(self)
    def __index__(self, *args): return vmaskmodule.VDMask___index__(self, *args)
    def __call__(self, *args): return vmaskmodule.VDMask___call__(self, *args)
    def get(self, *args): return vmaskmodule.VDMask_get(self, *args)
    __swig_getmethods__["gauss"] = lambda x: vmaskmodule.VDMask_gauss
    if _newclass:gauss = staticmethod(vmaskmodule.VDMask_gauss)
    __swig_getmethods__["log"] = lambda x: vmaskmodule.VDMask_log
    if _newclass:log = staticmethod(vmaskmodule.VDMask_log)
    def rotate45(self): return vmaskmodule.VDMask_rotate45(self)
    def rotate90(self): return vmaskmodule.VDMask_rotate90(self)
    def scalei(self): return vmaskmodule.VDMask_scalei(self)
    def trn(self): return vmaskmodule.VDMask_trn(self)
    def inv(self): return vmaskmodule.VDMask_inv(self)
    def cat(self, *args): return vmaskmodule.VDMask_cat(self, *args)
    def mul(self, *args): return vmaskmodule.VDMask_mul(self, *args)
    __swig_destroy__ = vmaskmodule.delete_VDMask
    __del__ = lambda self : None;
VDMask_swigregister = vmaskmodule.VDMask_swigregister
VDMask_swigregister(VDMask)

def VDMask_gauss(*args):
  return vmaskmodule.VDMask_gauss(*args)
VDMask_gauss = vmaskmodule.VDMask_gauss

def VDMask_log(*args):
  return vmaskmodule.VDMask_log(*args)
VDMask_log = vmaskmodule.VDMask_log



